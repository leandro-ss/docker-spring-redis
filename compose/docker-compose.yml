version: '3.6'

services:

  # elasticsearch:
  #   build:
  #     context: elasticsearch/
  #   volumes:
  #   - type: bind
  #     source: ./elasticsearch/config/elasticsearch.yml
  #     target: /usr/share/elasticsearch/config/elasticsearch.yml
  #     read_only: true
  #   - type: volume
  #     source: elasticsearch
  #     target: /usr/share/elasticsearch/data
  #   environment:
  #     ES_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   networks: ['stack']

  # kibana:
  #   build:
  #     context: kibana/
  #   volumes:
  #     - type: bind
  #       source: ./kibana/config/kibana.yml
  #       target: /usr/share/kibana/config/kibana.yml
  #       read_only: true
  #   depends_on:
  #     - elasticsearch
  #   networks: ['stack']

  # logstash:
  #   build:
  #     context: logstash/
  #   ports:
  #     - "5000:5000"
  #   volumes:
  #     - type: bind
  #       source: ./logstash/config/logstash.yml
  #       target: /usr/share/logstash/config/logstash.yml
  #       read_only: true
  #     - type: bind
  #       source: ./logstash/pipeline
  #       target: /usr/share/logstash/pipeline
  #       read_only: true
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   depends_on:
  #     - elasticsearch
  #   networks: ['stack']

  # apm-server:
  #   build:
  #     context: apm-server/
  #   volumes:
  #     - ./apm-server/config/apm-server.yml:/usr/share/apm-server/config/apm-server.yml:ro
  #   ports:
  #     - "8200:8200"
  #   depends_on:
  #     - elasticsearch
  #   networks: ['stack']

#  mongo-db:
#    build:
#      context: mongo-db/
#    ports:
#      - "27017:27017"
#    networks: ['stack']

   redis:
     build:
       context: redis/
     ports:
       - "6379:6379"
     networks: ['stack']

  # grafana:
  #   build:
  #     context: grafana/
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks: ['stack']

#  portainer:
#    build:
#      context: portainer/
#    command:  --no-auth -H unix:///var/run/docker.sock
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks: ['stack']
#
#  nginx:
#    build: nginx/
#    volumes:
#        - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:rw
#    ports:
#        - "80:80"
#    depends_on:
#      # - kibana
#      # - grafana
#      - portainer
#    networks: ['stack']
#
networks: {stack: {}}
#volumes: {elasticsearch: {}}

# db-pgsql:
#   build:
#     context: db-pgsql/
#   ports:
#     - "5432:5432"
#  volumes:
#   - db-data:/var/lib/postgresql/data
#   networks:
#     - internal
  
# mysql-db:
#   build:
#     context: mysql-db/
#   ports:
#     - "3306:3306"

#  zookeeper:
#    image: wurstmeister/zookeeper
#    ports:
#      - "2181:2181"
#  kafka:
#    context: kafka/
#    ports:
#      - "9092"
#    environment:
#      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

# metricbeat:
#   build:
#     context: metricbeat/
#   volumes:
#     - type: bind
#       source: ./metricbeat/config/metricbeat.yml
#       target: /usr/share/metricbeat/metricbeat.yml
#       read_only: true
#   networks: ['stack']
